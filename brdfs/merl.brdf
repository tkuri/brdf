analytic

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float gain 0.0 100.0 30.0
bool interpolation 1
::end parameters


# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever other functions you want too). 

::begin shader

const uint n_th_i = 8;
const uint n_ph_i = 4;
const uint n_th_o = 4;
const uint n_ph_o = 4;

const vec3 table[] = {
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.0146901,0.00205187,0.00114225),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.156652,0.0247975,0.0140015),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.00466418,0.000538696,0.000223677),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.0197037,0.00260657,0.00129697),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.0032211,0.000442076,6.89783e-05),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.0080726,0.000995574,0.000328954),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.0146901,0.00205187,0.00114225),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.156652,0.0247975,0.0140015),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.00466418,0.000538696,0.000223677),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.0197037,0.00260657,0.00129697),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.0032211,0.000442076,6.89783e-05),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.0080726,0.000995574,0.000328954),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.156539,0.0247705,0.0139943),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.0146901,0.00205187,0.00114225),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.0197899,0.00261124,0.00129678),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.00466418,0.000538696,0.000223677),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.00807,0.000998059,0.000330903),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.0032211,0.000442076,6.89783e-05),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.156539,0.0247705,0.0139943),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.0147246,0.00206652,0.00114626),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.0197899,0.00261124,0.00129678),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.00467753,0.000540605,0.00022522),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.00807,0.000998059,0.000330903),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.00322152,0.000441958,6.85196e-05),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.00672065,0.000720087,0.000458984),
vec3(0.0142422,0.00189274,0.00104265),
vec3(309.361,45.5095,30.8337),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.0033604,0.000513761,0.000110294),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0567882,0.00831969,0.00334567),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.00259031,0.000313881,4.6773e-05),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.0159508,0.00173328,0.000941906),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.00672065,0.000720087,0.000458984),
vec3(0.0142422,0.00189274,0.00104265),
vec3(309.361,45.5095,30.8337),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0033604,0.000513761,0.000110294),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0567882,0.00831969,0.00334567),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.00259031,0.000313881,4.6773e-05),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.0159508,0.00173328,0.000941906),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(309.361,45.5095,30.8337),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.00672065,0.000720087,0.000458984),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.0566531,0.00829693,0.00335195),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0033604,0.000513761,0.000110294),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0160718,0.0017422,0.000948641),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.00259031,0.000313881,4.6773e-05),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0142422,0.00189274,0.00104265),
vec3(309.361,45.5095,30.8337),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.00641285,0.000694401,0.00044814),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0566531,0.00829693,0.00335195),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.00336207,0.000514374,0.000110828),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.0160718,0.0017422,0.000948641),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.00259684,0.000317058,4.68772e-05),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.00451829,0.000533147,0.000247559),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.19527,0.0312038,0.0173168),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.00268398,0.000419869,5.93475e-05),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.266026,0.0429955,0.0238126),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.00232385,0.000299037,6.04673e-05),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.042408,0.00565668,0.00256183),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.00451829,0.000533147,0.000247559),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.19527,0.0312038,0.0173168),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.00268398,0.000419869,5.93475e-05),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.266026,0.0429955,0.0238126),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.00232385,0.000299037,6.04673e-05),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.042408,0.00565668,0.00256183),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.195323,0.0312194,0.0173185),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.00451829,0.000533147,0.000247559),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.266351,0.0430558,0.0239029),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.00268398,0.000419869,5.93475e-05),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.0425748,0.00566693,0.00257171),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.00232385,0.000299037,6.04673e-05),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.195323,0.0312194,0.0173185),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.00451388,0.000534196,0.000244945),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.266351,0.0430558,0.0239029),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.00268207,0.000419373,5.94748e-05),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.0425748,0.00566693,0.00257171),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.00233333,0.000304445,6.21659e-05),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00336207,0.000514374,0.000110828),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0566531,0.00829693,0.00335195),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.00241464,0.000358761,4.63953e-05),
vec3(0.00346193,0.000530194,7.77568e-05),
vec3(162.056,44.8606,36.4447),
vec3(0.00353644,0.000541101,8.01948e-05),
vec3(0.00231324,0.00033484,7.56505e-05),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.131933,0.0200083,0.00922668),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.00336207,0.000514374,0.000110828),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0566531,0.00829693,0.00335195),
vec3(0.00346193,0.000530194,7.77568e-05),
vec3(0.00241464,0.000358761,4.63953e-05),
vec3(0.00353198,0.000538708,7.71031e-05),
vec3(162.056,44.8606,36.4447),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.00231324,0.00033484,7.56505e-05),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.131933,0.0200083,0.00922668),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.0567882,0.00831969,0.00334567),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.00336207,0.000514374,0.000110828),
vec3(0.00588069,0.000619896,0.0002878),
vec3(162.056,44.8606,36.4447),
vec3(0.00353644,0.000541101,8.01948e-05),
vec3(0.00241464,0.000358761,4.63953e-05),
vec3(0.00345563,0.00052765,7.54662e-05),
vec3(0.13154,0.0199252,0.00923287),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.00231324,0.00033484,7.56505e-05),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0567882,0.00831969,0.00334567),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0033604,0.000513761,0.000110294),
vec3(0.00353644,0.000541101,8.01948e-05),
vec3(162.056,44.8606,36.4447),
vec3(0.00346193,0.000530194,7.77568e-05),
vec3(0.00225717,0.000412825,0.000106154),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.13154,0.0199252,0.00923287),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.00232901,0.000347207,8.09555e-05),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00284458,0.000431935,6.3126e-05),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.0271819,0.00362873,0.00168978),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.0021934,0.000327866,4.89951e-05),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.384076,0.0671857,0.040113),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.00213803,0.000228622,5.58665e-05),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.69736,0.158346,0.115331),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.00284458,0.000431935,6.3126e-05),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.0271598,0.00363038,0.00169232),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.0021934,0.000327866,4.89951e-05),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.384076,0.0671857,0.040113),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00213803,0.000228622,5.58665e-05),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.69736,0.158346,0.115331),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.0271598,0.00363038,0.00169232),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.00284458,0.000431935,6.3126e-05),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.38255,0.0669471,0.0398193),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.0021934,0.000327866,4.89951e-05),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.698258,0.158588,0.115505),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00213803,0.000228622,5.58665e-05),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.0271598,0.00363038,0.00169232),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.00283754,0.00043071,6.3267e-05),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.38255,0.0669471,0.0398193),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.00218724,0.000326655,4.75977e-05),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.698258,0.158588,0.115505),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00213473,0.000228686,5.6042e-05),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00259684,0.000317058,4.68772e-05),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.0150246,0.0016217,0.000889863),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00232901,0.000347207,8.09555e-05),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.13154,0.0199252,0.00923287),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.00214493,0.00018508,8.80608e-05),
vec3(0.00264261,0.000223938,0.000111952),
vec3(260.951,299.841,334.495),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00259684,0.000317058,4.68772e-05),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.0159508,0.00173328,0.000941906),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.00232901,0.000347207,8.09555e-05),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.13154,0.0199252,0.00923287),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00214493,0.00018508,8.80608e-05),
vec3(0.00264261,0.000223938,0.000111952),
vec3(260.951,299.841,334.495),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.0149565,0.00160878,0.000881749),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00259684,0.000317058,4.68772e-05),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.131933,0.0200083,0.00922668),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.00232901,0.000347207,8.09555e-05),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(260.951,299.841,334.495),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00214493,0.00018508,8.80608e-05),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.0150246,0.0016217,0.000889863),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00259031,0.000313881,4.6773e-05),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.131933,0.0200083,0.00922668),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.00231324,0.00033484,7.56505e-05),
vec3(0.00264261,0.000223938,0.000111952),
vec3(260.951,299.841,334.495),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00205759,0.000149737,0.000137532),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.0029074,0.000192705,5.80428e-05),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.0135033,0.00202976,0.00051247),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.0029618,0.000387143,0.000143182),
vec3(0.00331015,0.000260074,0.000228997),
vec3(0.0820228,0.0124732,0.00666259),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.00276854,0.000179115,0.000161719),
vec3(0.00296344,0.000152072,0.000174852),
vec3(2.43531,0.897725,0.803027),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.0029074,0.000192705,5.80428e-05),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.0134243,0.00201561,0.000509133),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.0029618,0.000387143,0.000143182),
vec3(0.00331015,0.000260074,0.000228997),
vec3(0.0820228,0.0124732,0.00666259),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.00276854,0.000179115,0.000161719),
vec3(0.00296344,0.000152072,0.000174852),
vec3(2.43531,0.897725,0.803027),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.0134243,0.00201561,0.000509133),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.0029074,0.000192705,5.80428e-05),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.0818778,0.0123917,0.00662904),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.0029618,0.000387143,0.000143182),
vec3(0.00331015,0.000260074,0.000228997),
vec3(2.43902,0.892249,0.798335),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.00276854,0.000179115,0.000161719),
vec3(0.00296344,0.000152072,0.000174852),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.0135033,0.00202976,0.00051247),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.00289996,0.000193756,5.8492e-05),
vec3(0.00331015,0.000260074,0.000228997),
vec3(0.0818778,0.0123917,0.00662904),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.00282504,0.000340045,0.000132818),
vec3(0.00296344,0.000152072,0.000174852),
vec3(2.43902,0.892249,0.798335),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.00277787,0.000183055,0.000165457),


};
const float PI = 3.14159265358979323846;


float theta(vec3 v, vec3 N)
{
    return acos(dot(v,N));
}

float phi(vec3 v, vec3 N, vec3 X)
{
    vec3 Y = normalize(cross(N,X));
    float costheta = clamp(dot(v,N),-1,1);
    float sintheta = sqrt(1-costheta*costheta);
    float cosphi = dot(v,X) / sintheta;
    float sinphi = dot(v,Y) / sintheta;
    float phi = acos(cosphi);
    return sinphi < 0 ? 2*PI-phi : phi;
}

uint round_idx(float v, const uint idxmax){
    return uint(clamp(uint(v) + 0.5, 0, idxmax-uint(1)));
}

uint circ_idx(float v, const uint idxmax){
    uint val = uint(v) + 0.5 >= float(idxmax) ? uint(0) : uint(uint(v) + 0.5);
    return val;
}

vec3 neighbor(float theta_i_fidx, float phi_i_fidx, float theta_o_fidx, float phi_o_fidx)
{
    // Convert floating index to integer index
    uint theta_i_idx = round_idx(theta_i_fidx, n_th_i);
    uint phi_i_idx = circ_idx(phi_i_fidx, n_ph_i);
    uint theta_o_idx = round_idx(theta_o_fidx, n_th_o);
    uint phi_o_idx = circ_idx(phi_o_fidx, n_ph_o);

    uint idx = phi_o_idx;
    idx += uint(theta_o_idx * n_ph_o);
    idx += uint(phi_i_idx * n_ph_o * n_th_o);
    idx += uint(theta_i_idx * n_ph_o * n_th_o * n_ph_i);
    return table[idx];
}

vec3 bilinear(float theta_i_fidx, float phi_i_fidx, float theta_o_fidx, float phi_o_fidx)
{
    uint theta_i_idx[2] = {uint(clamp(uint(theta_i_fidx), 0, n_th_i-uint(1))), uint(clamp(uint(theta_i_fidx)+uint(1), 0, n_th_i-uint(1)))};
    uint phi_i_idx = round_idx(phi_i_fidx, n_ph_i);
    // uint theta_o_idx = round_idx(theta_o_fidx, n_th_o);
    uint theta_o_idx[2] = {uint(clamp(uint(theta_o_fidx), 0, n_th_o-uint(1))), uint(clamp(uint(theta_o_fidx)+uint(1), 0, n_th_o-uint(1)))};
    uint phi_o_idx = round_idx(phi_o_fidx, n_ph_o);

    uint idx[2];
    for (int i_ti=0; i_ti<2; i_ti++){
        idx[i_ti] = phi_o_idx;
        idx[i_ti] += uint(theta_o_idx[0] * n_ph_o);
        idx[i_ti] += uint(phi_i_idx * n_ph_o * n_th_o);
        idx[i_ti] += uint(theta_i_idx[i_ti] * n_ph_o * n_th_o * n_ph_i);
    }
    
    float theta_i_ratio = theta_i_fidx - theta_i_idx[0];
    float theta_o_ratio = theta_o_fidx - theta_o_idx[0];
    vec3 val[2];
    val[0] = (1.0 - theta_i_ratio) * table[idx[0]] + theta_i_ratio * table[idx[1]];
    return val[0];
}

vec3 bilinear2(float theta_i_fidx, float phi_i_fidx, float theta_o_fidx, float phi_o_fidx)
{
    uint theta_i_idx[2] = {uint(clamp(uint(theta_i_fidx), 0, n_th_i-uint(1))), uint(clamp(uint(theta_i_fidx)+uint(1), 0, n_th_i-uint(1)))};
    uint phi_i_idx = round_idx(phi_i_fidx, n_ph_i);
    // uint theta_o_idx = round_idx(theta_o_fidx, n_th_o);
    uint theta_o_idx[2] = {uint(clamp(uint(theta_o_fidx), 0, n_th_o-uint(1))), uint(clamp(uint(theta_o_fidx)+uint(1), 0, n_th_o-uint(1)))};
    uint phi_o_idx = round_idx(phi_o_fidx, n_ph_o);

    uint idx[2*2];
    for (int i_to=0; i_to<2; i_to++){
        for (int i_ti=0; i_ti<2; i_ti++){
            idx[i_to*2 + i_ti] = phi_o_idx;
            idx[i_to*2 + i_ti] += uint(theta_o_idx[i_to] * n_ph_o);
            idx[i_to*2 + i_ti] += uint(phi_i_idx * n_ph_o * n_th_o);
            idx[i_to*2 + i_ti] += uint(theta_i_idx[i_ti] * n_ph_o * n_th_o * n_ph_i);
        }
    }
    
    float theta_i_ratio = theta_i_fidx - theta_i_idx[0];
    float theta_o_ratio = theta_o_fidx - theta_o_idx[0];
    vec3 v[2];
    for (int i_to=0; i_to<2; i_to++){
        v[i_to] = (1.0 - theta_i_ratio) * table[idx[i_to*2]] + theta_i_ratio * table[idx[i_to*2+1]];
    }
    vec3 val =  (1.0 - theta_o_ratio) * v[0] + theta_o_ratio * v[1];
    
    return val;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{    
    float theta_i = theta(L,N);
    float phi_i = phi(L,N,X);
    float theta_o = theta(V,N);
    float phi_o = phi(V,N,X);

    // Convert angle to floating index
    float theta_i_fidx = theta_i / (0.5 * PI / float(n_th_i));
    float phi_i_fidx = phi_i / (2.0 * PI / float(n_ph_i));
    float theta_fidx_o = theta_o / (0.5 * PI / float(n_th_o));
    float phi_o_fidx = phi_o / (2.0 * PI / float(n_ph_o));

    vec3 val;
    if (interpolation)
       val = bilinear2(theta_i_fidx, phi_i_fidx, theta_fidx_o, phi_o_fidx);
    else
       val = neighbor(theta_i_fidx, phi_i_fidx, theta_fidx_o, phi_o_fidx);


    return clamp(val / max(dot(V,N), 0.01) * gain, 0, 1); // if multiply V and N, have to convert.
    // return val * gain; // else
}

::end shader
