analytic

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float maxValue 1.0 5.0 3.0
float gain 0.0 5.0 1.0
bool interpolation 1
::end parameters


# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever other functions you want too). 

::begin shader

const uint n_th_i = 8;
const uint n_ph_i = 1;
const uint n_th_o = 8;
const uint n_ph_o = 8;

const vec3 table[] = {
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(224.878,26.6798,12.1848),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.139397,0.0233983,0.0140878),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0330041,0.00521988,0.00244854),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0137122,0.00181991,0.00104418),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.0072025,0.000762595,0.000456414),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00524836,0.000649964,0.000212127),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.00424735,0.000562654,0.000121086),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.0044851,0.000406647,0.000143328),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.138791,0.0231832,0.014029),
vec3(0.0366,0.00557448,0.00262655),
vec3(0.0398025,0.00592509,0.00267349),
vec3(0.0727929,0.010543,0.00560745),
vec3(0.265533,0.0438961,0.0252495),
vec3(221.383,41.1329,25.5969),
vec3(0.265533,0.0438961,0.0252495),
vec3(0.0728378,0.0105266,0.0056104),
vec3(0.039784,0.00595384,0.00268918),
vec3(0.0146901,0.00205187,0.00114225),
vec3(0.0163797,0.0022799,0.00121867),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.0717501,0.00998648,0.0050001),
vec3(0.156652,0.0247975,0.0140015),
vec3(0.0639515,0.00919837,0.00462377),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.0154279,0.00213031,0.00118457),
vec3(0.00765201,0.000832575,0.000526324),
vec3(0.00811923,0.000854404,0.000533339),
vec3(0.0118099,0.0013884,0.000795717),
vec3(0.0237691,0.00332941,0.00154532),
vec3(0.0464267,0.00696111,0.00291708),
vec3(0.0233807,0.00330861,0.00153813),
vec3(0.0110422,0.0013031,0.000747641),
vec3(0.00825585,0.000881844,0.000539449),
vec3(0.00466418,0.000538696,0.000223677),
vec3(0.0050538,0.000555975,0.000229383),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.0120076,0.00133853,0.000754478),
vec3(0.0197037,0.00260657,0.00129697),
vec3(0.0123866,0.00140547,0.000794495),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.00511241,0.000588491,0.000246938),
vec3(0.00358677,0.000492631,9.8399e-05),
vec3(0.00375185,0.000501995,9.91588e-05),
vec3(0.0051113,0.000575634,0.0001633),
vec3(0.00760574,0.0007801,0.000342369),
vec3(0.0106959,0.00113484,0.000669436),
vec3(0.00828387,0.000870685,0.000428256),
vec3(0.00520472,0.000598631,0.000185565),
vec3(0.00396661,0.000505559,0.000113246),
vec3(0.0032211,0.000442076,6.89783e-05),
vec3(0.00334477,0.000455716,7.49598e-05),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.00596751,0.000720827,0.000184144),
vec3(0.0080726,0.000995574,0.000328954),
vec3(0.00630838,0.000786883,0.000193245),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.00354428,0.000480003,7.79017e-05),
vec3(0.0033487,0.000271039,7.29959e-05),
vec3(0.00352135,0.000279043,8.52524e-05),
vec3(0.00432005,0.000364143,0.000117541),
vec3(0.00586896,0.000652928,0.000218695),
vec3(0.00730775,0.000939332,0.00027831),
vec3(0.00640585,0.000772855,0.000214773),
vec3(0.00466192,0.000423844,0.000138039),
vec3(0.00369984,0.000300141,8.65697e-05),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0330279,0.00520067,0.00243353),
vec3(0.0147246,0.00206652,0.00114626),
vec3(0.0154279,0.00213031,0.00118457),
vec3(0.0269818,0.0040157,0.00186148),
vec3(0.0639515,0.00919837,0.00462377),
vec3(0.156539,0.0247705,0.0139943),
vec3(0.0717501,0.00998648,0.0050001),
vec3(0.0280971,0.00406076,0.00184903),
vec3(0.0163797,0.0022799,0.00121867),
vec3(0.00672065,0.000720087,0.000458984),
vec3(0.00803106,0.00091292,0.000583327),
vec3(0.0142422,0.00189274,0.00104265),
vec3(0.0604064,0.00887991,0.00423962),
vec3(309.361,45.5095,30.8337),
vec3(0.060765,0.00889968,0.00425864),
vec3(0.0142592,0.00189475,0.00104127),
vec3(0.00803829,0.000911517,0.000586022),
vec3(0.00451388,0.000534196,0.000244945),
vec3(0.00502853,0.000524934,0.000302332),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.0315912,0.00456393,0.00196985),
vec3(0.195323,0.0312194,0.0173185),
vec3(0.033886,0.00501852,0.00217483),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.00474036,0.000520161,0.000261825),
vec3(0.0033604,0.000513761,0.000110294),
vec3(0.00371232,0.000533854,0.000124108),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.0176038,0.00219534,0.00114329),
vec3(0.0567882,0.00831969,0.00334567),
vec3(0.0178321,0.00228037,0.00114228),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.00350692,0.000489922,0.000111795),
vec3(0.00283754,0.00043071,6.3267e-05),
vec3(0.00301853,0.000446021,5.94874e-05),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.010446,0.00102691,0.000556264),
vec3(0.0271598,0.00363038,0.00169232),
vec3(0.0106251,0.00106061,0.000584512),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.00277266,0.000423514,6.71025e-05),
vec3(0.00259031,0.000313881,4.6773e-05),
vec3(0.00282319,0.00036293,4.73278e-05),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00848024,0.00101444,0.000290043),
vec3(0.0159508,0.00173328,0.000941906),
vec3(0.00857735,0.00103797,0.000318819),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.00271483,0.000320835,5.49699e-05),
vec3(0.00289996,0.000193756,5.8492e-05),
vec3(0.00312636,0.000233744,5.70841e-05),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.00732961,0.000907038,0.000252645),
vec3(0.0134243,0.00201561,0.000509133),
vec3(0.00759425,0.000976635,0.000246332),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.00306672,0.000215609,6.17072e-05),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.0135787,0.00179827,0.00103447),
vec3(0.00761991,0.000826015,0.000520455),
vec3(0.00825585,0.000881844,0.000539449),
vec3(0.0110422,0.0013031,0.000747641),
vec3(0.0233807,0.00330861,0.00153813),
vec3(0.0462012,0.00689486,0.00288587),
vec3(0.0237691,0.00332941,0.00154532),
vec3(0.0118099,0.0013884,0.000795717),
vec3(0.00811923,0.000854404,0.000533339),
vec3(0.00451829,0.000533147,0.000247559),
vec3(0.00474036,0.000520161,0.000261825),
vec3(0.00886695,0.000967773,0.00059185),
vec3(0.033886,0.00501852,0.00217483),
vec3(0.19527,0.0312038,0.0173168),
vec3(0.0315912,0.00456393,0.00196985),
vec3(0.00842339,0.000871012,0.000531286),
vec3(0.00502853,0.000524934,0.000302332),
vec3(0.00328151,0.000477651,9.51888e-05),
vec3(0.00344528,0.00052469,0.000109649),
vec3(0.00590573,0.000555806,0.00030277),
vec3(0.028239,0.00394484,0.00167871),
vec3(226.984,51.5837,40.3997),
vec3(0.0281584,0.00393206,0.00167279),
vec3(0.00590635,0.000555638,0.000306752),
vec3(0.00344379,0.000524875,0.000108226),
vec3(0.00268398,0.000419869,5.93475e-05),
vec3(0.0026745,0.000432315,5.96452e-05),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.0165955,0.00197888,0.00104352),
vec3(0.266026,0.0429955,0.0238126),
vec3(0.0185744,0.00229788,0.00112525),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.00274501,0.00045005,7.46246e-05),
vec3(0.00261565,0.000424394,7.71686e-05),
vec3(0.0025108,0.00039257,5.18394e-05),
vec3(0.00377177,0.000557645,7.25293e-05),
vec3(0.0120956,0.00122085,0.000639058),
vec3(0.0798599,0.0118609,0.00500536),
vec3(0.012631,0.00131037,0.000731785),
vec3(0.0037286,0.000519124,9.77151e-05),
vec3(0.00225262,0.000333645,4.60901e-05),
vec3(0.00232385,0.000299037,6.04673e-05),
vec3(0.00262438,0.000345617,4.46707e-05),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.0098393,0.00102201,0.000335361),
vec3(0.042408,0.00565668,0.00256183),
vec3(0.00959985,0.00107658,0.000361387),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.00232968,0.000219652,4.56355e-05),
vec3(0.00261483,0.000191702,6.17498e-05),
vec3(0.00298362,0.00022514,6.8e-05),
vec3(0.00412245,0.000424802,6.50764e-05),
vec3(0.00902656,0.00118917,0.000265893),
vec3(0.030587,0.00382947,0.00201186),
vec3(0.00853246,0.00108305,0.000263644),
vec3(0.00351898,0.00026334,8.02461e-05),
vec3(0.00261554,0.000173277,5.47037e-05),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00717843,0.000762729,0.000458589),
vec3(0.00467753,0.000540605,0.00022522),
vec3(0.00511241,0.000588491,0.000246938),
vec3(0.00765892,0.00077624,0.000460306),
vec3(0.0123866,0.00140547,0.000794495),
vec3(0.0197899,0.00261124,0.00129678),
vec3(0.0120076,0.00133853,0.000754478),
vec3(0.00780714,0.000751081,0.000423297),
vec3(0.0050538,0.000555975,0.000229383),
vec3(0.00336207,0.000514374,0.000110828),
vec3(0.00350692,0.000489922,0.000111795),
vec3(0.00588069,0.000619896,0.0002878),
vec3(0.0178321,0.00228037,0.00114228),
vec3(0.0566531,0.00829693,0.00335195),
vec3(0.0176038,0.00219534,0.00114329),
vec3(0.0054641,0.000565202,0.000240018),
vec3(0.00371232,0.000533854,0.000124108),
vec3(0.00268207,0.000419373,5.94748e-05),
vec3(0.00274501,0.00045005,7.46246e-05),
vec3(0.00444037,0.000572539,0.000170523),
vec3(0.0185744,0.00229788,0.00112525),
vec3(0.266351,0.0430558,0.0239029),
vec3(0.0165955,0.00197888,0.00104352),
vec3(0.00429804,0.000590835,0.00013136),
vec3(0.0026745,0.000432315,5.96452e-05),
vec3(0.00241464,0.000358761,4.63953e-05),
vec3(0.0022536,0.000376216,5.53888e-05),
vec3(0.00346193,0.000530194,7.77568e-05),
vec3(0.0148766,0.00160339,0.000816777),
vec3(162.056,44.8606,36.4447),
vec3(0.0148766,0.00160339,0.000816777),
vec3(0.00353644,0.000541101,8.01948e-05),
vec3(0.00225959,0.000379492,5.87024e-05),
vec3(0.00218724,0.000326655,4.75977e-05),
vec3(0.00227481,0.000389939,6.45829e-05),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.0122057,0.00111416,0.00054611),
vec3(0.38255,0.0669471,0.0398193),
vec3(0.0121824,0.00116154,0.000613274),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.00219137,0.000310516,5.19828e-05),
vec3(0.00231324,0.00033484,7.56505e-05),
vec3(0.00272497,0.000426979,6.30747e-05),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.0105998,0.000921695,0.000298472),
vec3(0.131933,0.0200083,0.00922668),
vec3(0.0100773,0.00104381,0.00033086),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.00216458,0.00019699,4.60137e-05),
vec3(0.00282504,0.000340045,0.000132818),
vec3(0.00380007,0.00038507,0.000117771),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.00959082,0.00115532,0.000226108),
vec3(0.0818778,0.0123917,0.00662904),
vec3(0.00863205,0.00101564,0.000228207),
vec3(0.00331015,0.000260074,0.000228997),
vec3(0.00249907,0.00017706,6.71031e-05),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00520498,0.000650349,0.000213104),
vec3(0.00358278,0.000494423,9.89633e-05),
vec3(0.00396661,0.000505559,0.000113246),
vec3(0.00520472,0.000598631,0.000185565),
vec3(0.00828387,0.000870685,0.000428256),
vec3(0.0107195,0.00113975,0.000668498),
vec3(0.00760574,0.0007801,0.000342369),
vec3(0.0051113,0.000575634,0.0001633),
vec3(0.00375185,0.000501995,9.91588e-05),
vec3(0.00284458,0.000431935,6.3126e-05),
vec3(0.00277266,0.000423514,6.71025e-05),
vec3(0.00432813,0.00051778,0.000120697),
vec3(0.0106251,0.00106061,0.000584512),
vec3(0.0271819,0.00362873,0.00168978),
vec3(0.010446,0.00102691,0.000556264),
vec3(0.00435304,0.000566323,0.000109397),
vec3(0.00301853,0.000446021,5.94874e-05),
vec3(0.00265079,0.000435555,8.51107e-05),
vec3(0.00225262,0.000333645,4.60901e-05),
vec3(0.0037286,0.000519124,9.77151e-05),
vec3(0.012631,0.00131037,0.000731785),
vec3(0.0810648,0.0120051,0.00508632),
vec3(0.0120956,0.00122085,0.000639058),
vec3(0.00377177,0.000557645,7.25293e-05),
vec3(0.0025108,0.00039257,5.18394e-05),
vec3(0.0021934,0.000327866,4.89951e-05),
vec3(0.00219137,0.000310516,5.19828e-05),
vec3(0.00318948,0.000492288,6.31289e-05),
vec3(0.0121824,0.00116154,0.000613274),
vec3(0.384076,0.0671857,0.040113),
vec3(0.0122057,0.00111416,0.00054611),
vec3(0.00327804,0.000498982,5.65506e-05),
vec3(0.00227481,0.000389939,6.45829e-05),
vec3(0.00211961,0.000279838,4.99694e-05),
vec3(0.00191095,0.000236441,6.46343e-05),
vec3(0.00295813,0.000451563,5.17682e-05),
vec3(0.0114625,0.000959913,0.000420345),
vec3(167.126,70.7035,67.564),
vec3(0.0114237,0.000962196,0.000422342),
vec3(0.00295813,0.000451563,5.17682e-05),
vec3(0.00191405,0.00024033,6.71603e-05),
vec3(0.00213803,0.000228622,5.58665e-05),
vec3(0.00199641,0.000237097,7.3439e-05),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.0101123,0.000902668,0.000237119),
vec3(0.69736,0.158346,0.115331),
vec3(0.00966525,0.000955601,0.000249754),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00200291,0.000135443,8.41537e-05),
vec3(0.00265561,0.000230668,0.000115069),
vec3(0.00273842,0.000345024,0.000107208),
vec3(0.00332162,0.000484669,8.57122e-05),
vec3(0.0100647,0.00121725,0.000163254),
vec3(0.278612,0.0581208,0.0375444),
vec3(0.00866876,0.00103388,0.000207775),
vec3(0.00311608,0.000202532,0.000168315),
vec3(0.00246745,0.000165041,0.000100021),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00421878,0.000560084,0.000121371),
vec3(0.00322152,0.000441958,6.85196e-05),
vec3(0.00354428,0.000480003,7.79017e-05),
vec3(0.00460431,0.000569382,0.00011908),
vec3(0.00630838,0.000786883,0.000193245),
vec3(0.00807,0.000998059,0.000330903),
vec3(0.00596751,0.000720827,0.000184144),
vec3(0.00442515,0.000565728,0.000120618),
vec3(0.00334477,0.000455716,7.49598e-05),
vec3(0.00259684,0.000317058,4.68772e-05),
vec3(0.00271483,0.000320835,5.49699e-05),
vec3(0.00367889,0.000483749,8.36592e-05),
vec3(0.00857735,0.00103797,0.000318819),
vec3(0.0150246,0.0016217,0.000889863),
vec3(0.00848024,0.00101444,0.000290043),
vec3(0.00379152,0.000517326,7.36373e-05),
vec3(0.00282319,0.00036293,4.73278e-05),
vec3(0.00233333,0.000304445,6.21659e-05),
vec3(0.00232968,0.000219652,4.56355e-05),
vec3(0.0033133,0.000439956,7.15375e-05),
vec3(0.00959985,0.00107658,0.000361387),
vec3(0.0425748,0.00566693,0.00257171),
vec3(0.0098393,0.00102201,0.000335361),
vec3(0.00344637,0.000495431,5.57922e-05),
vec3(0.00262438,0.000345617,4.46707e-05),
vec3(0.00232901,0.000347207,8.09555e-05),
vec3(0.00216458,0.00019699,4.60137e-05),
vec3(0.003068,0.000387269,5.96999e-05),
vec3(0.0100773,0.00104381,0.00033086),
vec3(0.13154,0.0199252,0.00923287),
vec3(0.0105998,0.000921695,0.000298472),
vec3(0.00343798,0.000509878,4.99567e-05),
vec3(0.00272497,0.000426979,6.30747e-05),
vec3(0.00213473,0.000228686,5.6042e-05),
vec3(0.00200291,0.000135443,8.41537e-05),
vec3(0.00282287,0.000306284,6.85554e-05),
vec3(0.00966525,0.000955601,0.000249754),
vec3(0.698258,0.158588,0.115505),
vec3(0.0101123,0.000902668,0.000237119),
vec3(0.00294781,0.000451352,6.41112e-05),
vec3(0.00199641,0.000237097,7.3439e-05),
vec3(0.00214493,0.00018508,8.80608e-05),
vec3(0.00195898,0.000123588,9.22425e-05),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00936202,0.00112056,0.000152012),
vec3(260.951,299.841,334.495),
vec3(0.00936202,0.00112056,0.000152012),
vec3(0.00264261,0.000223938,0.000111952),
vec3(0.00196174,0.00012097,9.63509e-05),
vec3(0.00277787,0.000183055,0.000165457),
vec3(0.00212311,0.000146126,0.000103285),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.0101166,0.00140403,0.000171039),
vec3(2.43902,0.892249,0.798335),
vec3(0.00948389,0.00127495,0.000186829),
vec3(0.00296344,0.000152072,0.000174852),
vec3(0.00253653,0.000113614,0.000191001),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00445571,0.000402827,0.000143836),
vec3(0.00335246,0.00027072,7.37476e-05),
vec3(0.00369984,0.000300141,8.65697e-05),
vec3(0.00466192,0.000423844,0.000138039),
vec3(0.00640585,0.000772855,0.000214773),
vec3(0.00733805,0.000936592,0.000285314),
vec3(0.00586896,0.000652928,0.000218695),
vec3(0.00432005,0.000364143,0.000117541),
vec3(0.00352135,0.000279043,8.52524e-05),
vec3(0.0029074,0.000192705,5.80428e-05),
vec3(0.00306672,0.000215609,6.17072e-05),
vec3(0.00381664,0.00030482,8.83095e-05),
vec3(0.00759425,0.000976635,0.000246332),
vec3(0.0135033,0.00202976,0.00051247),
vec3(0.00732961,0.000907038,0.000252645),
vec3(0.0040036,0.000353582,8.10057e-05),
vec3(0.00312636,0.000233744,5.70841e-05),
vec3(0.00263723,0.000189773,6.17609e-05),
vec3(0.00261554,0.000173277,5.47037e-05),
vec3(0.00351898,0.00026334,8.02461e-05),
vec3(0.00853246,0.00108305,0.000263644),
vec3(0.0308286,0.00386875,0.0020378),
vec3(0.00902656,0.00118917,0.000265893),
vec3(0.00412245,0.000424802,6.50764e-05),
vec3(0.00298362,0.00022514,6.8e-05),
vec3(0.0029618,0.000387143,0.000143182),
vec3(0.00249907,0.00017706,6.71031e-05),
vec3(0.00331015,0.000260074,0.000228997),
vec3(0.00863205,0.00101564,0.000228207),
vec3(0.0820228,0.0124732,0.00666259),
vec3(0.00959082,0.00115532,0.000226108),
vec3(0.00570215,0.000715773,9.2144e-05),
vec3(0.00380007,0.00038507,0.000117771),
vec3(0.00268904,0.000232736,0.000121785),
vec3(0.00246745,0.000165041,0.000100021),
vec3(0.00311608,0.000202532,0.000168315),
vec3(0.00866876,0.00103388,0.000207775),
vec3(0.278711,0.058266,0.0375277),
vec3(0.0100647,0.00121725,0.000163254),
vec3(0.00332162,0.000484669,8.57122e-05),
vec3(0.00273842,0.000345024,0.000107208),
vec3(0.00276854,0.000179115,0.000161719),
vec3(0.00253653,0.000113614,0.000191001),
vec3(0.00296344,0.000152072,0.000174852),
vec3(0.00948389,0.00127495,0.000186829),
vec3(2.43531,0.897725,0.803027),
vec3(0.0101166,0.00140403,0.000171039),
vec3(0.00262033,0.000200948,0.00011404),
vec3(0.00212311,0.000146126,0.000103285),
vec3(0.00282495,0.000203081,0.000173382),
vec3(0.00264722,0.000130336,0.000160403),
vec3(0.00296834,0.000163628,0.000162421),
vec3(0.00812482,0.000956022,0.000252563),
vec3(835.149,812.157,947.941),
vec3(0.00812482,0.000956022,0.000252563),
vec3(0.00298066,0.000169111,0.000163194),
vec3(0.00264722,0.000130336,0.000160403),

};
const float PI = 3.14159265358979323846;

float theta(vec3 v, vec3 N)
{
    return acos(dot(v,N));
}

float phi(vec3 v, vec3 N, vec3 X)
{
    vec3 Y = normalize(cross(N,X));
    float costheta = clamp(dot(v,N),-1,1);
    float sintheta = sqrt(1-costheta*costheta);
    float cosphi = dot(v,X) / sintheta;
    float sinphi = dot(v,Y) / sintheta;
    float phi = acos(cosphi);
    return sinphi < 0 ? 2*PI-phi : phi;
}

uint round_idx(float v, const uint idxmax){
    return uint(clamp(v + 0.5, 0, idxmax-uint(1)));
}

uint circ_idx(float v, const uint idxmax){
    uint val = v >= float(idxmax) ? uint(0) : uint(v);
    return val;
}

uint round_circ_idx(float v, const uint idxmax){
    uint val = v + 0.5 >= float(idxmax) ? uint(0) : uint(v + 0.5);
    return val;
}

vec3 neighbor3(float theta_i_fidx, float theta_o_fidx, float phi_o_fidx)
{
    // Convert floating index to integer index
    uint theta_i_idx = round_idx(theta_i_fidx, n_th_i);
    uint theta_o_idx = round_idx(theta_o_fidx, n_th_o);
    uint phi_o_idx = round_circ_idx(phi_o_fidx, n_ph_o);
    
    uint idx = phi_o_idx;
    idx += uint(theta_o_idx * n_ph_o);
    idx += uint(theta_i_idx * n_ph_o * n_th_o);
    return table[idx];
}

vec3 bilinear3(float theta_i_fidx, float theta_o_fidx, float phi_o_fidx)
{
    // Convert floating index to integer index
    uint theta_i_idx[2] = {uint(theta_i_fidx), min(uint(theta_i_fidx + 1.0), n_th_i-uint(1))};
    uint theta_o_idx[2] = {uint(theta_o_fidx), min(uint(theta_o_fidx + 1.0), n_th_o-uint(1))};
    uint phi_o_idx[2] = {uint(phi_o_fidx), circ_idx(phi_o_fidx + 1.0,  n_ph_o)};

    float theta_i_ratio = theta_i_fidx - theta_i_idx[0];
    float theta_o_ratio = theta_o_fidx - theta_o_idx[0];
    float phi_o_ratio = phi_o_fidx - phi_o_idx[0];

    uint idx[2*2*2];
    for (int i=0; i<2; i++){ // theta_in
        for (int k=0; k<2; k++){ // theta_out
            for (int l=0; l<2; l++){ // phi_delta
                idx[l + 2*k + 4*i] = phi_o_idx[l];
                idx[l + 2*k + 4*i] += uint(theta_o_idx[k] * n_ph_o);
                idx[l + 2*k + 4*i] += uint(theta_i_idx[i] * n_ph_o * n_th_o);
            }
        }
    }
    
    vec3 v[2*2*2];
    vec3 val = {0.0, 0.0, 0.0};
    for (int i=0; i<2; i++){ // theta_in
        for (int k=0; k<2; k++){ // theta_out
            for (int l=0; l<2; l++){ // phi_delta
                float ratio = (theta_i_ratio*i+(1.0-theta_i_ratio)*(1-i));
                ratio *= (theta_o_ratio*k+(1.0-theta_o_ratio)*(1-k));
                ratio *= (phi_o_ratio*l+(1.0-phi_o_ratio)*(1-l));

                val += clamp(table[idx[l + 2*k + 4*i]], 0, maxValue) * ratio; // clamp if value is very high
            }
        }
    }
    
    return val;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{    
    float theta_i = theta(L,N);
    float phi_i = phi(L,N,X);
    float theta_o = theta(V,N);
    float phi_o = phi(V,N,X);

    if (theta_i >= PI/2 || theta_o >= PI/2) return vec3(0.0, 0.0, 0.0); // No light area or No visible area
    
    // Convert angle to floating index
    float theta_i_fidx = theta_i / (0.5 * PI) * float(n_th_i);
    float phi_i_fidx = phi_i / (2.0 * PI) * float(n_ph_i);
    float theta_o_fidx = theta_o / (0.5 * PI) * float(n_th_o);
    float phi_o_fidx = abs(phi_i - phi_o) / (2.0 * PI) * float(n_ph_o); // Isotropic

    vec3 val;
    if (interpolation){
       val = bilinear3(theta_i_fidx, theta_o_fidx, phi_o_fidx);
    }
    else{
       val = neighbor3(theta_i_fidx, theta_o_fidx, phi_o_fidx);
    }


    return clamp(val / max(dot(V,N), 0.01) * gain, 0, maxValue); // if multiply V and N, have to convert.
    // return val * gain; // else
}

::end shader
