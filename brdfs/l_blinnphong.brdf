analytic

# Blinn Phong based on halfway-vector

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float reflectanceR 0.0 1.0 0.1
float reflectanceG 0.0 1.0 0.1
float reflectanceB 0.0 1.0 0.1
float specularR 0.0 1.0 0.1
float specularG 0.0 1.0 0.1
float specularB 0.0 1.0 0.1
float n 1 1000 100
bool divide_by_NdotL 0
::end parameters


# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).

::begin shader

const float PI = 3.14159265358979323846;

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 H = normalize(L+V);

    float val = pow(max(0,dot(N,H)),n);
    if (divide_by_NdotL)
        val = val / dot(N,L);
    return (vec3(reflectanceR,reflectanceG,reflectanceB) / PI + vec3(specularR, specularG, specularB)*val);
}

::end shader
